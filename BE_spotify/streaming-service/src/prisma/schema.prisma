generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model album_songs {
  id       Int    @id @default(autoincrement())
  album_id Int
  song_id  Int
  albums   albums @relation(fields: [album_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  songs    songs  @relation(fields: [song_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model albums {
  id           Int           @id @default(autoincrement())
  title        String        @db.VarChar(100)
  release_date DateTime?     @db.Date
  album_songs  album_songs[]
  songs        songs[]
}

model artist_genres {
  id        Int     @id @default(autoincrement())
  artist_id Int
  genre_id  Int
  artists   artists @relation(fields: [artist_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  genres    genres  @relation(fields: [genre_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model artists {
  id            Int             @id @default(autoincrement())
  artist_name   String          @db.VarChar(100)
  bio           String?
  artist_genres artist_genres[]
  song_artists  song_artists[]
}

model comments {
  id           Int       @id @default(autoincrement())
  user_id      Int
  discuss_id   Int?
  content      String
  song_id      Int?
  discuss_date DateTime? @default(now()) @db.Timestamp(6)
  songs        songs?    @relation(fields: [song_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users        users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model genres {
  id            Int             @id @default(autoincrement())
  genre_name    String          @unique @db.VarChar(50)
  artist_genres artist_genres[]
}

model notifications {
  id        Int       @id @default(autoincrement())
  user_id   Int
  message   String
  is_read   Boolean?  @default(false)
  timestamp DateTime? @default(now()) @db.Timestamp(6)
  users     users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model playlist_songs {
  id          Int       @id @default(autoincrement())
  playlist_id Int
  song_id     Int
  user_id     Int
  playlists   playlists @relation(fields: [playlist_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  songs       songs     @relation(fields: [song_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model playlists {
  id             Int              @id @default(autoincrement())
  playlist_name  String           @db.VarChar(100)
  description    String?
  user_id        Int
  is_public      Boolean?         @default(true)
  image          String?          @db.VarChar(255)
  create_date    DateTime?        @default(now()) @db.Timestamp(6)
  playlist_songs playlist_songs[]
  users          users            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model song_artists {
  id        Int     @id @default(autoincrement())
  song_id   Int
  artist_id Int
  artists   artists @relation(fields: [artist_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  songs     songs   @relation(fields: [song_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model songs {
  id             Int              @id @default(autoincrement())
  song_name      String           @db.VarChar(100)
  description    String?
  album_id       Int?
  duration       DateTime?        @db.Time(6)
  release_date   DateTime?        @db.Date
  image          String?          @db.VarChar(255)
  album_songs    album_songs[]
  comments       comments[]
  playlist_songs playlist_songs[]
  song_artists   song_artists[]
  albums         albums?          @relation(fields: [album_id], references: [id], onUpdate: NoAction)
}

model users {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(100)
  email          String           @unique @db.VarChar(100)
  password       String           @db.VarChar(255)
  avatar         String?          @db.VarChar(255)
  description    String?
  banner         String?          @db.VarChar(255)
  nationality    String?          @db.VarChar(100)
  role           String?          @db.VarChar(50)
  comments       comments[]
  notifications  notifications[]
  playlist_songs playlist_songs[]
  playlists      playlists[]
}
